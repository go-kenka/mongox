// Code generated by mongox, DO NOT EDIT.
package user

import (
	"context"
	"errors"

	"github.com/go-kenka/mongox/model/aggregates/watch"
	"github.com/go-kenka/mongox/model/bulks"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

const (
	CollectionName                 = "user"
	FieldId                        = "_id"
	FieldString                    = "string"
	FieldBool                      = "bool"
	FieldBinary                    = "binary"
	FieldDouble                    = "double"
	FieldDataTime                  = "data_time"
	FieldCreateAt                  = "create_at"
	FieldPointer                   = "pointer"
	FieldDecimal                   = "decimal"
	FieldInt32                     = "int32"
	FieldInt64                     = "int64"
	FieldJs                        = "js"
	FieldJsScope                   = "js_scope"
	FieldRegular                   = "regular"
	FieldInt32s                    = "int32s"
	FieldInt64s                    = "int64s"
	FieldStrings                   = "strings"
	FieldFloats                    = "floats"
	FieldArrayAny                  = "array_any"
	FieldArrayobjectSimple         = "arrayobject_simple"
	FieldArrayobjectSimpleId       = "arrayobject_simple._id"
	FieldArrayobjectSimpleString   = "arrayobject_simple.string"
	FieldArrayobjectSimpleBool     = "arrayobject_simple.bool"
	FieldArrayobjectSimpleBinary   = "arrayobject_simple.binary"
	FieldArrayobjectSimpleDouble   = "arrayobject_simple.double"
	FieldArrayobjectSimpleDataTime = "arrayobject_simple.data_time"
	FieldArrayobjectSimpleCreateAt = "arrayobject_simple.create_at"
	FieldArrayobjectSimplePointer  = "arrayobject_simple.pointer"
	FieldArrayobjectSimpleDecimal  = "arrayobject_simple.decimal"
	FieldArrayobjectSimpleInt32    = "arrayobject_simple.int32"
	FieldArrayobjectSimpleInt64    = "arrayobject_simple.int64"
	FieldArrayobjectSimpleJs       = "arrayobject_simple.js"
	FieldArrayobjectSimpleJsScope  = "arrayobject_simple.js_scope"
	FieldArrayobjectSimpleRegular  = "arrayobject_simple.regular"
	FieldArrayobjectSimpleInt32s   = "arrayobject_simple.int32s"
	FieldArrayobjectSimpleInt64s   = "arrayobject_simple.int64s"
	FieldArrayobjectSimpleStrings  = "arrayobject_simple.strings"
	FieldArrayobjectSimpleFloats   = "arrayobject_simple.floats"
	FieldObjectSimple              = "object_simple"
	FieldObjectSimpleId            = "object_simple._id"
	FieldObjectSimpleString        = "object_simple.string"
	FieldObjectSimpleBool          = "object_simple.bool"
	FieldObjectSimpleBinary        = "object_simple.binary"
	FieldObjectSimpleDouble        = "object_simple.double"
	FieldObjectSimpleDataTime      = "object_simple.data_time"
	FieldObjectSimpleCreateAt      = "object_simple.create_at"
	FieldObjectSimplePointer       = "object_simple.pointer"
	FieldObjectSimpleDecimal       = "object_simple.decimal"
	FieldObjectSimpleInt32         = "object_simple.int32"
	FieldObjectSimpleInt64         = "object_simple.int64"
	FieldObjectSimpleJs            = "object_simple.js"
	FieldObjectSimpleJsScope       = "object_simple.js_scope"
	FieldObjectSimpleRegular       = "object_simple.regular"
	FieldObjectSimpleInt32s        = "object_simple.int32s"
	FieldObjectSimpleInt64s        = "object_simple.int64s"
	FieldObjectSimpleStrings       = "object_simple.strings"
	FieldObjectSimpleFloats        = "object_simple.floats"
)

type UserData struct {
	Id                    primitive.ObjectID           `bson:"_id" json:"aaaa"`
	String                string                       `bson:"string" json:"s1"`
	Bool                  bool                         `bson:"bool" json:"s1"`
	Binary                primitive.Binary             `bson:"binary" json:"b1"`
	Double                float64                      `bson:"double" json:"d1"`
	DataTime              primitive.DateTime           `bson:"data_time" json:"aaaa"`
	CreateAt              primitive.Timestamp          `bson:"create_at" json:"aaaa"`
	Pointer               primitive.DBPointer          `bson:"pointer" json:"aaaa"`
	Decimal               primitive.Decimal128         `bson:"decimal" json:"aaaa"`
	Int32                 int32                        `bson:"int32" json:"aaaa"`
	Int64                 int64                        `bson:"int64" json:"aaaa"`
	Js                    primitive.JavaScript         `bson:"js" json:"aaaa"`
	JsScope               primitive.CodeWithScope      `bson:"js_scope" json:"aaaa"`
	Regular               primitive.Regex              `bson:"regular" json:"aaaa"`
	Int32s                []int32                      `bson:"int32s" json:"aaaa"`
	Int64s                []int64                      `bson:"int64s" json:"aaaa"`
	Strings               []string                     `bson:"strings" json:"aaaa"`
	Floats                []float64                    `bson:"floats" json:"aaaa"`
	ArrayAny              []any                        `bson:"array_any" json:"aaaa"`
	ArrayobjectSimpleList []*UserArrayobjectSimpleData `bson:"arrayobject_simple" json:"aaaa"`
	ObjectSimple          *UserObjectSimpleData        `bson:"object_simple" json:"aaaa"`
}
type UserArrayobjectSimpleData struct {
	Id       primitive.ObjectID      `bson:"_id" json:"aaaa"`
	String   string                  `bson:"string" json:"s1"`
	Bool     bool                    `bson:"bool" json:"s1"`
	Binary   primitive.Binary        `bson:"binary" json:"b1"`
	Double   float64                 `bson:"double" json:"d1"`
	DataTime primitive.DateTime      `bson:"data_time" json:"aaaa"`
	CreateAt primitive.Timestamp     `bson:"create_at" json:"aaaa"`
	Pointer  primitive.DBPointer     `bson:"pointer" json:"aaaa"`
	Decimal  primitive.Decimal128    `bson:"decimal" json:"aaaa"`
	Int32    int32                   `bson:"int32" json:"aaaa"`
	Int64    int64                   `bson:"int64" json:"aaaa"`
	Js       primitive.JavaScript    `bson:"js" json:"aaaa"`
	JsScope  primitive.CodeWithScope `bson:"js_scope" json:"aaaa"`
	Regular  primitive.Regex         `bson:"regular" json:"aaaa"`
	Int32s   []int32                 `bson:"int32s" json:"aaaa"`
	Int64s   []int64                 `bson:"int64s" json:"aaaa"`
	Strings  []string                `bson:"strings" json:"aaaa"`
	Floats   []float64               `bson:"floats" json:"aaaa"`
}
type UserObjectSimpleData struct {
	Id       primitive.ObjectID      `bson:"_id" json:"aaaa"`
	String   string                  `bson:"string" json:"s1"`
	Bool     bool                    `bson:"bool" json:"s1"`
	Binary   primitive.Binary        `bson:"binary" json:"b1"`
	Double   float64                 `bson:"double" json:"d1"`
	DataTime primitive.DateTime      `bson:"data_time" json:"aaaa"`
	CreateAt primitive.Timestamp     `bson:"create_at" json:"aaaa"`
	Pointer  primitive.DBPointer     `bson:"pointer" json:"aaaa"`
	Decimal  primitive.Decimal128    `bson:"decimal" json:"aaaa"`
	Int32    int32                   `bson:"int32" json:"aaaa"`
	Int64    int64                   `bson:"int64" json:"aaaa"`
	Js       primitive.JavaScript    `bson:"js" json:"aaaa"`
	JsScope  primitive.CodeWithScope `bson:"js_scope" json:"aaaa"`
	Regular  primitive.Regex         `bson:"regular" json:"aaaa"`
	Int32s   []int32                 `bson:"int32s" json:"aaaa"`
	Int64s   []int64                 `bson:"int64s" json:"aaaa"`
	Strings  []string                `bson:"strings" json:"aaaa"`
	Floats   []float64               `bson:"floats" json:"aaaa"`
}

func (d UserData) Document() any {
	return d
}
func (d UserData) Update() {}

type UserClient struct {
	c  *mongo.Client
	db string
}

func NewUserClient(db *mongo.Client) *UserClient {
	return &UserClient{
		c: db,
	}
}

func (c *UserClient) Database(database string) *UserClient {
	c.db = database
	return c
}

func (c *UserClient) collection() *mongo.Collection {
	if len(c.db) == 0 {
		panic(errors.New("db not set"))
	}

	return c.c.Database(c.db).Collection(CollectionName)
}

func (c *UserClient) Query() *UserQuery {
	return NewUserQuery(c.collection())
}

func (c *UserClient) Create() *UserCreate {
	return NewUserCreate(c.collection())
}

func (c *UserClient) UpdateMany() *UserUpdateMany {
	return NewUserUpdateMany(c.collection())
}

func (c *UserClient) UpdateOne() *UserUpdateOne {
	return NewUserUpdateOne(c.collection())
}

func (c *UserClient) UpdateOneID(id primitive.ObjectID) *UserUpdateOneID {
	return NewUserUpdateOneID(id, c.collection())
}

func (c *UserClient) ReplaceOne() *UserReplaceOne {
	return NewUserReplaceOne(c.collection())
}

func (c *UserClient) DeleteMany() *UserDeleteMany {
	return NewUserDeleteMany(c.collection())
}

func (c *UserClient) DeleteOne() *UserDeleteOne {
	return NewUserDeleteOne(c.collection())
}

func (c *UserClient) Aggregate() *UserAggregate {
	return NewUserAggregate(c.collection())
}

func (c *UserClient) Drop(ctx context.Context) error {
	return c.collection().Drop(ctx)
}

func (c *UserClient) Watch(ctx context.Context, pipeline watch.WatchPipe, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	return c.collection().Watch(ctx, pipeline.Pipe(), opts...)
}

func (c *UserClient) Indexes() mongo.IndexView {
	return c.collection().Indexes()
}

func (c *UserClient) Clone(opts ...*options.CollectionOptions) (*mongo.Collection, error) {
	return c.collection().Clone(opts...)
}

func (c *UserClient) Name() string {
	return c.collection().Name()
}

func (c *UserClient) GetDatabase() *mongo.Database {
	return c.collection().Database()
}

func (c *UserClient) BulkWrite(ctx context.Context, mds []bulks.BulkModel, opts ...*options.BulkWriteOptions) (*mongo.BulkWriteResult, error) {
	var models []mongo.WriteModel
	for _, stage := range mds {
		models = append(models, stage.WriteModel())
	}
	return c.collection().BulkWrite(ctx, models, opts...)
}
