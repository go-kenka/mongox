// Code generated by mongox, DO NOT EDIT.
package {{.Name | lower}}

import (
	"context"
	
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type {{.Name}}Create struct {
	cc *mongo.Collection
}

func New{{.Name}}Create(cc *mongo.Collection) *{{.Name}}Create {
	return &{{.Name}}Create{cc: cc}
}

func (q *{{.Name}}Create) InsertOne(ctx context.Context, doc {{.Name}}Data, opts ...*options.InsertOneOptions) (*{{.Name}}Data, error) {
	doc.Id = primitive.NewObjectID()
	_, err := q.cc.InsertOne(ctx, doc, opts...)
	if err != nil {
		return nil, err
	}
	return &doc, nil
}

func (q *{{.Name}}Create) InsertMany(ctx context.Context, docs []{{.Name}}Data, opts ...*options.InsertManyOptions) ([]{{.Name}}Data, error) {
	for _, doc := range docs {
		doc.Id = primitive.NewObjectID()
	}

	_, err := q.cc.InsertMany(ctx, toSlice(docs), opts...)
	if err != nil {
		return nil, err
	}

	return docs, err
}

func toSlice(docs []{{.Name}}Data) (v []interface{}) {
	for _, doc := range docs {
		v = append(v, doc)
	}
	return
}
