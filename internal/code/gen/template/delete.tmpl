// Code generated by mongox, DO NOT EDIT.
package {{.Name | lower}}

import (
	"context"

	"github.com/go-kenka/mongox/model/filters"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type {{.Name}}DeleteMany struct {
	cc     *mongo.Collection
	filter bson.D
	opts   *options.DeleteOptions
}

func New{{.Name}}DeleteMany(cc *mongo.Collection) *{{.Name}}DeleteMany {
	return &{{.Name}}DeleteMany{
		cc: cc,
	}
}

// SetFilter set filter
func (u *{{.Name}}DeleteMany) SetFilter(f filters.Filter) *{{.Name}}DeleteMany {
	u.filter = f.Document()
	return u
}

// SetCollation sets the value for the Collation field.
func (u *{{.Name}}DeleteMany) SetCollation(c *options.Collation) *{{.Name}}DeleteMany {
	u.opts.Collation = c
	return u
}

// SetComment sets the value for the Comment field.
func (u *{{.Name}}DeleteMany) SetComment(comment interface{}) *{{.Name}}DeleteMany {
	u.opts.Comment = comment
	return u
}

// SetHint sets the value for the Hint field.
func (u *{{.Name}}DeleteMany) SetHint(h interface{}) *{{.Name}}DeleteMany {
	u.opts.Hint = h
	return u
}

// SetLet sets the value for the Let field.
func (u *{{.Name}}DeleteMany) SetLet(l interface{}) *{{.Name}}DeleteMany {
	u.opts.Let = l
	return u
}

func (u *{{.Name}}DeleteMany) Save(ctx context.Context) (*mongo.DeleteResult, error) {
	return u.cc.DeleteMany(ctx, u.filter, u.opts)
}

type {{.Name}}DeleteOne struct {
	cc     *mongo.Collection
	filter bson.D
	opts   *options.DeleteOptions
}

func New{{.Name}}DeleteOne(cc *mongo.Collection) *{{.Name}}DeleteOne {
	return &{{.Name}}DeleteOne{
		cc: cc,
	}
}

// SetFilter set filter
func (u *{{.Name}}DeleteOne) SetFilter(f filters.Filter) *{{.Name}}DeleteOne {
	u.filter = f.Document()
	return u
}

// SetCollation sets the value for the Collation field.
func (u *{{.Name}}DeleteOne) SetCollation(c *options.Collation) *{{.Name}}DeleteOne {
	u.opts.Collation = c
	return u
}

// SetComment sets the value for the Comment field.
func (u *{{.Name}}DeleteOne) SetComment(comment interface{}) *{{.Name}}DeleteOne {
	u.opts.Comment = comment
	return u
}

// SetHint sets the value for the Hint field.
func (u *{{.Name}}DeleteOne) SetHint(h interface{}) *{{.Name}}DeleteOne {
	u.opts.Hint = h
	return u
}

// SetLet sets the value for the Let field.
func (u *{{.Name}}DeleteOne) SetLet(l interface{}) *{{.Name}}DeleteOne {
	u.opts.Let = l
	return u
}

func (u *{{.Name}}DeleteOne) Save(ctx context.Context) (*mongo.DeleteResult, error) {
	return u.cc.DeleteOne(ctx, u.filter, u.opts)
}
