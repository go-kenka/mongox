// Code generated by mognox, DO NOT EDIT.
package {{.Name | lower}}

import (
	"context"

	"github.com/go-kenka/mongox/bsonx"
	"github.com/go-kenka/mongox/model/filters"
	"github.com/go-kenka/mongox/model/updates"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type {{.Name}}UpdateMany struct {
	cc     *mongo.Collection
	filter bson.D
	update updates.Update
	opts   *options.UpdateOptions
}

func New{{.Name}}UpdateMany(cc *mongo.Collection) *{{.Name}}UpdateMany {
	return &{{.Name}}UpdateMany{cc: cc}
}

// SetFilter set filter
func (u *{{.Name}}UpdateMany) SetFilter(f filters.Filter) *{{.Name}}UpdateMany {
	u.filter = f.Document()
	return u
}

// SetUpdate set update doc
func (u *{{.Name}}UpdateMany) SetUpdate(up updates.Update) *{{.Name}}UpdateMany {
	u.update = up
	return u
}

// SetArrayFilters sets the value for the ArrayFilters field.
func (u *{{.Name}}UpdateMany) SetArrayFilters(af options.ArrayFilters) *{{.Name}}UpdateMany {
	u.opts.ArrayFilters = &af
	return u
}

// SetBypassDocumentValidation sets the value for the BypassDocumentValidation field.
func (u *{{.Name}}UpdateMany) SetBypassDocumentValidation(b bool) *{{.Name}}UpdateMany {
	u.opts.BypassDocumentValidation = &b
	return u
}

// SetCollation sets the value for the Collation field.
func (u *{{.Name}}UpdateMany) SetCollation(c *options.Collation) *{{.Name}}UpdateMany {
	u.opts.Collation = c
	return u
}

// SetComment sets the value for the Comment field.
func (u *{{.Name}}UpdateMany) SetComment(comment interface{}) *{{.Name}}UpdateMany {
	u.opts.Comment = comment
	return u
}

// SetHint sets the value for the Hint field.
func (u *{{.Name}}UpdateMany) SetHint(h interface{}) *{{.Name}}UpdateMany {
	u.opts.Hint = h
	return u
}

// SetUpsert sets the value for the Upsert field.
func (u *{{.Name}}UpdateMany) SetUpsert(b bool) *{{.Name}}UpdateMany {
	u.opts.Upsert = &b
	return u
}

// SetLet sets the value for the Let field.
func (u *{{.Name}}UpdateMany) SetLet(l interface{}) *{{.Name}}UpdateMany {
	u.opts.Let = l
	return u
}

func (u *{{.Name}}UpdateMany) Save(ctx context.Context) (*mongo.UpdateResult, error) {
	return u.cc.UpdateMany(ctx, u.filter, u.update.Document(), u.opts)
}

type {{.Name}}UpdateOne struct {
	cc     *mongo.Collection
	filter bson.D
	update updates.Update
	opts   *options.UpdateOptions
}

func New{{.Name}}UpdateOne(cc *mongo.Collection) *{{.Name}}UpdateOne {
	return &{{.Name}}UpdateOne{cc: cc}
}

// SetFilter set filter
func (u *{{.Name}}UpdateOne) SetFilter(f filters.Filter) *{{.Name}}UpdateOne {
	u.filter = f.Document()
	return u
}

// SetUpdate set update doc
func (u *{{.Name}}UpdateOne) SetUpdate(up updates.Update) *{{.Name}}UpdateOne {
	u.update = up
	return u
}

// SetArrayFilters sets the value for the ArrayFilters field.
func (u *{{.Name}}UpdateOne) SetArrayFilters(af options.ArrayFilters) *{{.Name}}UpdateOne {
	u.opts.ArrayFilters = &af
	return u
}

// SetBypassDocumentValidation sets the value for the BypassDocumentValidation field.
func (u *{{.Name}}UpdateOne) SetBypassDocumentValidation(b bool) *{{.Name}}UpdateOne {
	u.opts.BypassDocumentValidation = &b
	return u
}

// SetCollation sets the value for the Collation field.
func (u *{{.Name}}UpdateOne) SetCollation(c *options.Collation) *{{.Name}}UpdateOne {
	u.opts.Collation = c
	return u
}

// SetComment sets the value for the Comment field.
func (u *{{.Name}}UpdateOne) SetComment(comment interface{}) *{{.Name}}UpdateOne {
	u.opts.Comment = comment
	return u
}

// SetHint sets the value for the Hint field.
func (u *{{.Name}}UpdateOne) SetHint(h interface{}) *{{.Name}}UpdateOne {
	u.opts.Hint = h
	return u
}

// SetUpsert sets the value for the Upsert field.
func (u *{{.Name}}UpdateOne) SetUpsert(b bool) *{{.Name}}UpdateOne {
	u.opts.Upsert = &b
	return u
}

// SetLet sets the value for the Let field.
func (u *{{.Name}}UpdateOne) SetLet(l interface{}) *{{.Name}}UpdateOne {
	u.opts.Let = l
	return u
}

func (u *{{.Name}}UpdateOne) Save(ctx context.Context) (*mongo.UpdateResult, error) {
	return u.cc.UpdateOne(ctx, u.filter, u.update.Document(), u.opts)
}

type {{.Name}}UpdateOneID struct {
	cc     *mongo.Collection
	filter bson.D
	update updates.Update
	opts   *options.UpdateOptions
}

func New{{.Name}}UpdateOneID(id primitive.ObjectID, cc *mongo.Collection) *{{.Name}}UpdateOneID {
	return &{{.Name}}UpdateOneID{
		cc:     cc,
		filter: filters.Eq("_id", bsonx.ObjectId(id)).Document(),
	}
}

// SetUpdate set update doc
func (u *{{.Name}}UpdateOneID) SetUpdate(up updates.Update) *{{.Name}}UpdateOneID {
	u.update = up
	return u
}

// SetArrayFilters sets the value for the ArrayFilters field.
func (u *{{.Name}}UpdateOneID) SetArrayFilters(af options.ArrayFilters) *{{.Name}}UpdateOneID {
	u.opts.ArrayFilters = &af
	return u
}

// SetBypassDocumentValidation sets the value for the BypassDocumentValidation field.
func (u *{{.Name}}UpdateOneID) SetBypassDocumentValidation(b bool) *{{.Name}}UpdateOneID {
	u.opts.BypassDocumentValidation = &b
	return u
}

// SetCollation sets the value for the Collation field.
func (u *{{.Name}}UpdateOneID) SetCollation(c *options.Collation) *{{.Name}}UpdateOneID {
	u.opts.Collation = c
	return u
}

// SetComment sets the value for the Comment field.
func (u *{{.Name}}UpdateOneID) SetComment(comment interface{}) *{{.Name}}UpdateOneID {
	u.opts.Comment = comment
	return u
}

// SetHint sets the value for the Hint field.
func (u *{{.Name}}UpdateOneID) SetHint(h interface{}) *{{.Name}}UpdateOneID {
	u.opts.Hint = h
	return u
}

// SetUpsert sets the value for the Upsert field.
func (u *{{.Name}}UpdateOneID) SetUpsert(b bool) *{{.Name}}UpdateOneID {
	u.opts.Upsert = &b
	return u
}

// SetLet sets the value for the Let field.
func (u *{{.Name}}UpdateOneID) SetLet(l interface{}) *{{.Name}}UpdateOneID {
	u.opts.Let = l
	return u
}

func (u *{{.Name}}UpdateOneID) Save(ctx context.Context) (*mongo.UpdateResult, error) {
	return u.cc.UpdateByID(ctx, u.filter, u.update.Document(), u.opts)
}

type {{.Name}}ReplaceOne struct {
	cc      *mongo.Collection
	filter  bson.D
	replace *{{.Name}}Data
	opts    *options.ReplaceOptions
}

func New{{.Name}}ReplaceOne(cc *mongo.Collection) *{{.Name}}ReplaceOne {
	return &{{.Name}}ReplaceOne{cc: cc}
}

// SetFilter set filter
func (u *{{.Name}}ReplaceOne) SetFilter(f filters.Filter) *{{.Name}}ReplaceOne {
	u.filter = f.Document()
	return u
}

// SetReplace set replace doc
func (u *{{.Name}}ReplaceOne) SetReplace(replace *{{.Name}}Data) *{{.Name}}ReplaceOne {
	u.replace = replace
	return u
}

// SetBypassDocumentValidation sets the value for the BypassDocumentValidation field.
func (u *{{.Name}}ReplaceOne) SetBypassDocumentValidation(b bool) *{{.Name}}ReplaceOne {
	u.opts.BypassDocumentValidation = &b
	return u
}

// SetCollation sets the value for the Collation field.
func (u *{{.Name}}ReplaceOne) SetCollation(c *options.Collation) *{{.Name}}ReplaceOne {
	u.opts.Collation = c
	return u
}

// SetComment sets the value for the Comment field.
func (u *{{.Name}}ReplaceOne) SetComment(comment interface{}) *{{.Name}}ReplaceOne {
	u.opts.Comment = comment
	return u
}

// SetHint sets the value for the Hint field.
func (u *{{.Name}}ReplaceOne) SetHint(h interface{}) *{{.Name}}ReplaceOne {
	u.opts.Hint = h
	return u
}

// SetUpsert sets the value for the Upsert field.
func (u *{{.Name}}ReplaceOne) SetUpsert(b bool) *{{.Name}}ReplaceOne {
	u.opts.Upsert = &b
	return u
}

// SetLet sets the value for the Let field.
func (u *{{.Name}}ReplaceOne) SetLet(l interface{}) *{{.Name}}ReplaceOne {
	u.opts.Let = l
	return u
}

func (u *{{.Name}}ReplaceOne) Save(ctx context.Context) (*mongo.UpdateResult, error) {
	return u.cc.ReplaceOne(ctx, u.filter, u.replace, u.opts)
}
